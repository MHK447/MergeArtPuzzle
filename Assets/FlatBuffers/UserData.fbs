namespace BanpoFri.Data;


///// 자동 클래스 생성 규칙 /////
// @AutoCreate 주석 이후의 내용만 처리 (없으면 자동 처리 X)
// @EndCreate 주석 이후의 내용은 자동 처리 X
/* 예시)
// @AutoCreate
  data_1:int; // 자동 생성 O
  data_2:int; // 자동 생성 O
// @EndCreate
  data_3:int; // 자동 생성 X
  data_4:int; // 자동 생성 X
// @AutoCreate
  data_5:int; // 자동 생성 O
*/
// 기본 자료형의 경우 뒤에 // @ReactiveProperty 주석 값을 붙이면 ReactiveProperty 형으로 생성
// ex) testdata:[int] = 0; // @ReactiveCollection
// 뒤에 붙이는 자료형들
// @ReactiveProperty : ReactiveProperty 형
// @ReactiveCollection : ReactiveCollection 형
// @Dictionary : Dictionary 형
// [] 형태에서 뒤에 Dictionary 주석이 없으면 기본 List 형으로 생성됨
////////////////////////////

table UserData {
// @AutoCreate
  money:double; // @ReactiveProperty
  cash:int = 0;// @ReactiveProperty
  buyinappids:string;
  tutorial:[string];
  lastlogintime:long = 0;
  optiondata:OptionData;
  recordcount:[RecordCount];
  gamestarttime:long = 0;
  uuid:long = 0;
  recordvalue:[RecordCount];
  stagedata:StageData;
  nextstagecount:int =0;// @ReactiveProperty
  stageenergycount:int = 0;// @ReactiveProperty
  foodmergegroupdatas:[FoodMergeGroupData];
  energycoin:int = 0; //@ReactiveProperty 
  starcoinvalue:int = 0; //@ReactiveProperty
  energycreatefood:int = 0; 
  // @EndCreate
  dayinitialtime:long = 0;
  // @AutoCreate
}

table OptionData {
  language:string;
  bgm:bool = false;
  effect:bool = false;
  slowgraphic:bool = false;
  vibration:bool = true;
  subscribeorder:bool = false;
  autofelling:bool = false;
}

table RecordCount {
  idx:string;
  count:int = 0;
}

table FoodMergeGroupData
{
   foodmergeidx:int = 0;
   ingamefooddatas:[InGameFoodData];
   foodcount:int = 0; //@ReactiveProperty
   stageclearstarcount:int = 0; //@ReactiveProperty
   drawfooddatas:[DrawFoodData];
}

table InGameFoodData
{
   foodidx:int = 0;
   mergegrade:int = 0;
}

table DrawFoodData
{
   foodidx:int = 0; 
   drawfoodcount:int = 0;
}

table StageData
{
  stageidx:int = 1; // @ReactiveProperty
}

root_type UserData;
